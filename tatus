[1mdiff --git a/.idea/misc.xml b/.idea/misc.xml[m
[1mindex bbdcf76..5617532 100644[m
[1m--- a/.idea/misc.xml[m
[1m+++ b/.idea/misc.xml[m
[36m@@ -1,7 +1,10 @@[m
 <?xml version="1.0" encoding="UTF-8"?>[m
 <project version="4">[m
[31m-  <component name="ProjectRootManager" version="2" languageLevel="PYTHON36">[m
[31m-    <output url="file://$PROJECT_DIR$/out" />[m
[31m-    <orderEntry type="library" name="Python SDK" level="project" />[m
[32m+[m[32m  <component name="Black">[m
[32m+[m[32m    <option name="sdkName" value="Python 3.12 (env)" />[m
   </component>[m
[31m-</project>[m
[32m+[m[32m  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.12 (env)" project-jdk-type="Python SDK" />[m
[32m+[m[32m  <component name="PyCharmProfessionalAdvertiser">[m
[32m+[m[32m    <option name="shown" value="true" />[m
[32m+[m[32m  </component>[m
[32m+[m[32m</project>[m
\ No newline at end of file[m
[1mdiff --git a/User_Auth/migrations/0001_initial.py b/User_Auth/migrations/0001_initial.py[m
[1mindex 04b5b3f..132a232 100644[m
[1m--- a/User_Auth/migrations/0001_initial.py[m
[1m+++ b/User_Auth/migrations/0001_initial.py[m
[36m@@ -1,15 +1,10 @@[m
[31m-# Generated by Django 5.0.8 on 2024-08-12 05:45[m
[31m-[m
[32m+[m[32m# Generated by Django 5.0.8 on 2024-08-08 11:14[m
[32m+[m[32m# Generated by Django 5.0.8 on 2024-08-08 11:50[m
 from django.db import migrations, models[m
[31m-[m
[31m-[m
 class Migration(migrations.Migration):[m
[31m-[m
     initial = True[m
[31m-[m
     dependencies = [[m
     ][m
[31m-[m
     operations = [[m
         migrations.CreateModel([m
             name='User',[m
[36m@@ -21,5 +16,8 @@[m [mclass Migration(migrations.Migration):[m
                 ('created_at', models.DateTimeField(auto_now_add=True)),[m
                 ('updated_at', models.DateTimeField(auto_now=True)),[m
             ],[m
[32m+[m[32m            options={[m
[32m+[m[32m                'indexes': [models.Index(fields=['username', 'password'], name='User_Auth_u_usernam_9fb935_idx')],[m
[32m+[m[32m            },[m
         ),[m
[31m-    ][m
[32m+[m[32m    ][m
\ No newline at end of file[m
[1mdiff --git a/User_Auth/migrations/0002_remove_user_user_auth_u_usernam_9fb935_idx.py b/User_Auth/migrations/0002_remove_user_user_auth_u_usernam_9fb935_idx.py[m
[1mnew file mode 100644[m
[1mindex 0000000..fae735e[m
[1m--- /dev/null[m
[1m+++ b/User_Auth/migrations/0002_remove_user_user_auth_u_usernam_9fb935_idx.py[m
[36m@@ -0,0 +1,17 @@[m
[32m+[m[32m# Generated by Django 5.0.8 on 2024-08-09 08:19[m
[32m+[m
[32m+[m[32mfrom django.db import migrations[m
[32m+[m
[32m+[m
[32m+[m[32mclass Migration(migrations.Migration):[m
[32m+[m
[32m+[m[32m    dependencies = [[m
[32m+[m[32m        ('User_Auth', '0001_initial'),[m
[32m+[m[32m    ][m
[32m+[m
[32m+[m[32m    operations = [[m
[32m+[m[32m        migrations.RemoveIndex([m
[32m+[m[32m            model_name='user',[m
[32m+[m[32m            name='User_Auth_u_usernam_9fb935_idx',[m
[32m+[m[32m        ),[m
[32m+[m[32m    ][m
[1mdiff --git a/User_Auth/models.py b/User_Auth/models.py[m
[1mindex 02d5072..6400ff8 100644[m
[1m--- a/User_Auth/models.py[m
[1m+++ b/User_Auth/models.py[m
[36m@@ -1,16 +1,15 @@[m
 from django.db import models[m
[31m-from django.contrib.auth.hashers import check_password, make_password[m
[31m-[m
[31m-[m
[32m+[m[32mfrom django.contrib.auth.hashers import check_password,make_password[m
 class User(models.Model):[m
[31m-    username = models.CharField(max_length=50, unique=True)[m
[32m+[m[32m    username = models.CharField(max_length=50,unique=True)[m
     email = models.EmailField(unique=True)[m
     password = models.CharField(max_length=500)[m
     created_at = models.DateTimeField(auto_now_add=True)[m
     updated_at = models.DateTimeField(auto_now=True)[m
[31m-[m
     def check_password(self, raw_password):[m
         return check_password(raw_password, self.password)[m
[31m-[m
     def set_password(self, raw_password):[m
         self.password = make_password(raw_password)[m
[41m+[m
[41m+[m
[41m+[m
[1mdiff --git a/User_Auth/serializer.py b/User_Auth/serializer.py[m
[1mindex aa123f6..c738e63 100644[m
[1m--- a/User_Auth/serializer.py[m
[1m+++ b/User_Auth/serializer.py[m
[36m@@ -1,13 +1,9 @@[m
 from rest_framework import serializers[m
 from .models import User[m
[31m-[m
[31m-[m
 class LoginSerializer(serializers.ModelSerializer):[m
     class Meta:[m
         model = User[m
         fields = ['username', 'email', 'created_at', 'updated_at'][m
[31m-[m
[31m-[m
 class UserSerializer(serializers.Serializer):[m
     class Meta:[m
         model = User[m
[1mdiff --git a/User_Auth/validator.py b/User_Auth/validator.py[m
[1mindex d9be4e6..2868575 100644[m
[1m--- a/User_Auth/validator.py[m
[1m+++ b/User_Auth/validator.py[m
[36m@@ -3,13 +3,11 @@[m [mdef verifying_signup_request(request):[m
     # Define the validation schema[m
     schema = {[m
         'password': {'type': 'string',  'required': True},[m
[31m-        'username': {'type': 'string','required': True},[m
[31m-        'email':{'type':'string', 'required': False, 'regex': r'^\S+@\S+\.\S+$'}[m
     }[m
[31m-    # if "username" in request.data:[m
[31m-    #     schema.update({'username': {'type': 'string','required': True}})[m
[31m-    # else:[m
[31m-    #     schema.update({'email': {'type': 'string','required': True, 'regex': r'^\S+@\S+\.\S+$'}})[m
[32m+[m[32m    if "username" in request.data:[m
[32m+[m[32m        schema.update({'username': {'type': 'string','required': True}})[m
[32m+[m[32m    else:[m
[32m+[m[32m        schema.update({'email': {'type': 'string','required': True, 'regex': r'^\S+@\S+\.\S+$'}})[m
 [m
     v = Validator(schema)[m
     if v.validate(request.data):[m
[1mdiff --git a/User_Auth/views.py b/User_Auth/views.py[m
[1mindex bdb76a1..5454de5 100644[m
[1m--- a/User_Auth/views.py[m
[1m+++ b/User_Auth/views.py[m
[36m@@ -8,28 +8,17 @@[m [mfrom .serializer import LoginSerializer[m
 from .validator import verifying_user_login, verifying_signup_request[m
 from rest_framework.permissions import IsAuthenticated[m
 [m
[31m-[m
 @api_view(['POST'])[m
 def signup_api(request):[m
     if not verifying_signup_request(request):[m
         return Response({"Error": "Invalid request body"}, status=status.HTTP_400_BAD_REQUEST)[m
 [m
[31m-    # Get the username from the request[m
[31m-    username = request.data.get('username')[m
[31m-    email = request.data.get('email')[m
[31m-[m
[31m-[m
[31m-[m
     # Create the user[m
[31m-    user = User(username=username, email=email)[m
[32m+[m[32m    user = User(username=request.data.get('username'))[m
     user.set_password(request.data.get('password'))[m
[31m-    # Set the email as username + '@yopmal.com'[m
[31m-    if not email:[m
[31m-        user.email = f"{username}@yopmal.com"[m
[31m-[m
     user.save()[m
[31m-    return Response({"Success": "User Created Successfully"}, status=status.HTTP_200_OK)[m
 [m
[32m+[m[32m    return Response({"Success": "User Created Successfully"}, status=status.HTTP_200_OK)[m
 [m
 @api_view(['POST'])[m
 def user_login(request):[m
[36m@@ -60,7 +49,6 @@[m [mdef user_login(request):[m
     return Response(user_data, status=status.HTTP_200_OK)[m
 [m
 [m
[31m-[m
 @api_view(['POST'])[m
 @is_auth[m
 def user_logout(request):[m
[36m@@ -84,3 +72,4 @@[m [mdef user_logout(request):[m
 [m
     except Exception as e:[m
         return Response({'success': False, 'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)[m
[41m+[m
[1mdiff --git a/intern_network/settings.py b/intern_network/settings.py[m
[1mindex 8bc0791..7ae0942 100644[m
[1m--- a/intern_network/settings.py[m
[1m+++ b/intern_network/settings.py[m
[36m@@ -82,9 +82,9 @@[m [mWSGI_APPLICATION = "intern_network.wsgi.application"[m
 DATABASES = {[m
     'default': {[m
         'ENGINE': 'django.db.backends.mysql',[m
[31m-    